[{"D:\\React\\shopsuey\\client\\src\\index.js":"1","D:\\React\\shopsuey\\client\\src\\App.js":"2","D:\\React\\shopsuey\\client\\src\\Store.js":"3","D:\\React\\shopsuey\\client\\src\\screens\\ProductScreen.js":"4","D:\\React\\shopsuey\\client\\src\\screens\\HomeScreen.js":"5","D:\\React\\shopsuey\\client\\src\\screens\\CartScreen.js":"6","D:\\React\\shopsuey\\client\\src\\screens\\ShippingAddressScreen.js":"7","D:\\React\\shopsuey\\client\\src\\screens\\SigninScreen.js":"8","D:\\React\\shopsuey\\client\\src\\utils.js":"9","D:\\React\\shopsuey\\client\\src\\components\\LoadingSign.js":"10","D:\\React\\shopsuey\\client\\src\\components\\MessageBox.js":"11","D:\\React\\shopsuey\\client\\src\\components\\Product.js":"12","D:\\React\\shopsuey\\client\\src\\components\\Rating.js":"13","D:\\React\\shopsuey\\client\\src\\components\\CheckoutSteps.js":"14","D:\\React\\shopsuey\\client\\src\\screens\\SignupScreen.js":"15","D:\\React\\shopsuey\\client\\src\\screens\\PaymentMethodScreen.js":"16","D:\\React\\shopsuey\\client\\src\\screens\\PlaceOrderScreen.js":"17","D:\\React\\shopsuey\\client\\src\\screens\\OrderScreen.js":"18","D:\\React\\shopsuey\\client\\src\\screens\\OrderHistoryScreen.js":"19"},{"size":656,"mtime":1675113830682,"results":"20","hashOfConfig":"21"},{"size":4432,"mtime":1676353913488,"results":"22","hashOfConfig":"21"},{"size":2832,"mtime":1674516039720,"results":"23","hashOfConfig":"21"},{"size":4379,"mtime":1673568941662,"results":"24","hashOfConfig":"21"},{"size":2089,"mtime":1673568941661,"results":"25","hashOfConfig":"21"},{"size":5433,"mtime":1673568941661,"results":"26","hashOfConfig":"21"},{"size":3872,"mtime":1673568941663,"results":"27","hashOfConfig":"21"},{"size":2484,"mtime":1673568941664,"results":"28","hashOfConfig":"21"},{"size":153,"mtime":1673568941666,"results":"29","hashOfConfig":"21"},{"size":263,"mtime":1673568941655,"results":"30","hashOfConfig":"21"},{"size":208,"mtime":1673568941656,"results":"31","hashOfConfig":"21"},{"size":1668,"mtime":1673568941657,"results":"32","hashOfConfig":"21"},{"size":1369,"mtime":1673568941658,"results":"33","hashOfConfig":"21"},{"size":549,"mtime":1673568941654,"results":"34","hashOfConfig":"21"},{"size":3211,"mtime":1673583210643,"results":"35","hashOfConfig":"21"},{"size":2403,"mtime":1673918672043,"results":"36","hashOfConfig":"21"},{"size":7751,"mtime":1674844131547,"results":"37","hashOfConfig":"21"},{"size":11018,"mtime":1675121996893,"results":"38","hashOfConfig":"21"},{"size":3398,"mtime":1676353503914,"results":"39","hashOfConfig":"21"},{"filePath":"40","messages":"41","suppressedMessages":"42","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"119ik6k",{"filePath":"43","messages":"44","suppressedMessages":"45","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"46","messages":"47","suppressedMessages":"48","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"49","messages":"50","suppressedMessages":"51","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"52"},{"filePath":"53","messages":"54","suppressedMessages":"55","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"56"},{"filePath":"57","messages":"58","suppressedMessages":"59","errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"60"},{"filePath":"61","messages":"62","suppressedMessages":"63","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"64","messages":"65","suppressedMessages":"66","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"67","messages":"68","suppressedMessages":"69","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"70","messages":"71","suppressedMessages":"72","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"73","messages":"74","suppressedMessages":"75","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"76","messages":"77","suppressedMessages":"78","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"79"},{"filePath":"80","messages":"81","suppressedMessages":"82","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"83","messages":"84","suppressedMessages":"85","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"86","messages":"87","suppressedMessages":"88","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"89","messages":"90","suppressedMessages":"91","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"92","messages":"93","suppressedMessages":"94","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"95"},{"filePath":"96","messages":"97","suppressedMessages":"98","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"99"},{"filePath":"100","messages":"101","suppressedMessages":"102","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"D:\\React\\shopsuey\\client\\src\\index.js",[],[],"D:\\React\\shopsuey\\client\\src\\App.js",[],[],"D:\\React\\shopsuey\\client\\src\\Store.js",[],[],"D:\\React\\shopsuey\\client\\src\\screens\\ProductScreen.js",["103"],[],"import axios from 'axios';\r\nimport React, { useContext, useEffect, useReducer } from 'react'\r\nimport Row from 'react-bootstrap/Row';\r\nimport Col from 'react-bootstrap/Col';\r\nimport Card from 'react-bootstrap/Card';\r\nimport Badge from 'react-bootstrap/Badge';\r\nimport Button from 'react-bootstrap/Button';\r\nimport ListGroup from 'react-bootstrap/ListGroup';\r\nimport { Navigate, useNavigate, useParams } from 'react-router-dom';\r\nimport Rating from '../components/Rating';\r\nimport { Helmet } from 'react-helmet-async';\r\nimport LoadingSign from '../components/LoadingSign';\r\nimport MessageBox from '../components/MessageBox';\r\nimport { getError } from '../utils';\r\nimport { Store } from '../Store';\r\n\r\nconst reducer = (state,action) => {\r\n  switch(action.type) {\r\n    case 'FETCH_REQUEST': \r\n      return {...state, loading: true};\r\n    case 'FETCH_SUCCESS':\r\n      return{...state, product: action.payload, loading: false};\r\n    case 'FETCH_FAIL':\r\n      return{...state, loading: false, error: action.payload};\r\n    default:\r\n      return state;\r\n  }\r\n}\r\n\r\nexport default function ProductScreen() {\r\n\r\n  const navigate = useNavigate();\r\n  const params = useParams();\r\n  const {slug} = params;\r\n\r\n  const [{loading, error, product}, dispatch] = useReducer(reducer, {\r\n    product: [],    \r\n    loading: true,\r\n    error: '',\r\n  })\r\n  \r\n  useEffect(()=>{\r\n    const fetchData = async () => {\r\n\r\n      dispatch({type: 'FETCH_REQUEST'});\r\n      try{\r\n        const result = await axios.get(`/api/products/slug/${slug}`);\r\n        dispatch({type: 'FETCH_SUCCESS', payload: result.data});\r\n      }catch(err){\r\n        dispatch({type: 'FETCH_FAIL',payload: getError(err)});\r\n      }\r\n    };\r\n    fetchData();\r\n  },[slug]);\r\n\r\n  const {state, dispatch: cxtDispatch} = useContext(Store);\r\n  const {cart}=state;\r\n  \r\n  const addToCartHandler = async() => {\r\n    const existItem = cart.cartItems.find((x) => x._id === product._id);\r\n    const quantity = existItem ? existItem.quantity+1 : 1;\r\n    const {data} = await axios.get(`/api/products/${product._id}`);\r\n    console.log(quantity); \r\n    if(data.countInStock < quantity) {\r\n\r\n      window.alert('Sorry Out of Stock');\r\n      return;\r\n    }\r\n    cxtDispatch({\r\n      type: 'CART_ADD_ITEM',\r\n      payload: {...product, quantity}\r\n    });\r\n    navigate('/cart')\r\n  };\r\n\r\n  return (\r\n    loading? <LoadingSign/>\r\n    :error? <MessageBox variant='danger'>{error}</MessageBox>\r\n    :\r\n    <div>\r\n      <Row>\r\n        <Col md={6}>\r\n          <img className='img-large'\r\n               src={product.image}\r\n               alt={product.name}/>\r\n        </Col>\r\n        <Col md={3}>\r\n          <ListGroup variant='flush'>\r\n            <ListGroup.Item>\r\n              <Helmet>\r\n                <title>{product.name}</title>\r\n              </Helmet>\r\n            </ListGroup.Item>\r\n            <ListGroup.Item>\r\n              <Rating rating={product.rating} numReviews={product.numReviews}></Rating>\r\n            </ListGroup.Item>\r\n            <ListGroup.Item>Price : ${product.price}</ListGroup.Item>\r\n            <ListGroup.Item>\r\n              Description:\r\n              <p>{product.description}</p>\r\n            </ListGroup.Item>\r\n          </ListGroup>\r\n        </Col>\r\n        <Col md={3}>\r\n          <Card>\r\n            <Card.Body>\r\n              <ListGroup variant='flush'>\r\n                <ListGroup.Item>\r\n                  <Row>\r\n                    <Col>Price:</Col>\r\n                    <Col>${product.price}</Col>\r\n                  </Row>\r\n                </ListGroup.Item>\r\n                <ListGroup.Item>\r\n                  <Row>\r\n                    <Col>Status:</Col>\r\n                    <Col>{product.countInStock > 0 \r\n                    ? <Badge bg=\"success\">In Stock</Badge> \r\n                    : <Badge bg=\"danger\">Out of Stock</Badge>}\r\n                    </Col>\r\n                  </Row>\r\n                </ListGroup.Item>\r\n\r\n                {product.countInStock > 0 && (\r\n                  <ListGroup.Item>\r\n                    <div className='d-grid'>\r\n                      <Button onClick={addToCartHandler} variant='primary'>\r\n                        Add to Cart\r\n                      </Button>\r\n                    </div>\r\n                  </ListGroup.Item>\r\n                )}\r\n              </ListGroup>\r\n            </Card.Body>\r\n          </Card>\r\n        </Col>\r\n      </Row>\r\n    </div>\r\n  )\r\n}\r\n","D:\\React\\shopsuey\\client\\src\\screens\\HomeScreen.js",["104","105"],[],"import React, { useEffect, useReducer, useState } from 'react';\r\n\r\nimport axios from 'axios';\r\nimport Row from 'react-bootstrap/Row';\r\nimport Col from 'react-bootstrap/Col';\r\nimport Product from '../components/Product';\r\nimport { Helmet } from 'react-helmet-async';\r\nimport LoadingSign from '../components/LoadingSign';\r\nimport MessageBox from '../components/MessageBox';\r\n//import data from '../data'\r\n\r\nconst reducer = (state,action) => {\r\n  switch(action.type) {\r\n    case 'FETCH_REQUEST': \r\n      return {...state, loading: true};\r\n    case 'FETCH_SUCCESS':\r\n      return{...state, products: action.payload, loading: false};\r\n    case 'FETCH_FAIL':\r\n      return{...state, loading: false, error: action.payload};\r\n    default:\r\n      return state;\r\n  }\r\n}\r\n\r\nexport default function HomeScreen() {\r\n  //const [products, setProducts] = useState([]);\r\n\r\n  const [{loading, error, products}, dispatch] = useReducer(reducer, {\r\n    products: [],    \r\n    loading: true,\r\n    error: '',\r\n  })\r\n\r\n  useEffect(()=>{\r\n    const fetchData = async () => {\r\n\r\n      dispatch({type: 'FETCH_REQUEST'});\r\n      try{\r\n        const result = await axios.get(`/api/products`);\r\n        dispatch({type: 'FETCH_SUCCESS', payload: result.data});\r\n      }catch(err){\r\n        dispatch({type: 'FETCH_FAIL', payload: err.message});\r\n      }\r\n\r\n      const result = await axios.get('/api/products');\r\n      //setProducts(result.data);\r\n    };\r\n    fetchData();\r\n  },[]);\r\n  \r\n  return (\r\n    <div>\r\n        <Helmet><title>Shopsuey</title></Helmet>\r\n        <h1>New Products</h1>\r\n        <div className='products'>\r\n          {loading ? ( \r\n            <LoadingSign/>\r\n          ) : error ? (\r\n            <MessageBox variant='danger'>{error}</MessageBox>\r\n          ) : (\r\n            <Row>\r\n              {products.map((product) => (\r\n                <Col key={product.slug} sm={6} md={4} lg={3} className=\"mb-3\">\r\n                  <Product product={product}></Product>\r\n                </Col>            \r\n              ))}\r\n            </Row>\r\n          )}          \r\n        </div>\r\n    </div>\r\n  )\r\n}\r\n","D:\\React\\shopsuey\\client\\src\\screens\\CartScreen.js",["106","107","108"],[],"import React from 'react';\r\nimport { Link, Navigate, useNavigate } from 'react-router-dom';\r\nimport { Helmet } from 'react-helmet-async';\r\nimport { useContext, useEffect, useReducer } from 'react'\r\nimport Row from 'react-bootstrap/Row';\r\nimport axios from 'axios';\r\nimport Col from 'react-bootstrap/Col';\r\nimport MessageBox from '../components/MessageBox';\r\nimport ListGroup from 'react-bootstrap/ListGroup';\r\nimport Button from 'react-bootstrap/Button';\r\nimport Card from 'react-bootstrap/Card';\r\nimport { Store } from '../Store';\r\n\r\nexport default function CartScreen() {\r\n    const navigate = useNavigate();\r\n    const{ state, dispatch: ctxDispatch } = useContext(Store);\r\n    const{\r\n        cart:{cartItems},\r\n    } = state;\r\n\r\n    const updateCartHandler = async (item, quantity) => {\r\n        const {data} = await axios.get(`/api/products/${item._id}`);\r\n        if(data.countInStock < quantity) {\r\n\r\n            window.alert('Sorry Out of Stock');\r\n            return;\r\n          }\r\n          ctxDispatch({\r\n            type: 'CART_ADD_ITEM',\r\n            payload: {...item, quantity}\r\n          });\r\n    }\r\n    const removeItemHandler = (item) => {\r\n        ctxDispatch({type:'CART_REMOVE_ITEM', payload: item});\r\n\r\n    }\r\n\r\n    const checkoutHandler = () => {\r\n        navigate('/signin?redirect=/shipping');\r\n    };\r\n\r\n  return (\r\n    <div>\r\n        <Helmet>\r\n            <title>Shopping Cart</title>\r\n        </Helmet>\r\n        <h1>Shopping Cart</h1>\r\n        \r\n        <Row>\r\n            <Col md = {8}>\r\n                {cartItems.length === 0 ? (\r\n                    <MessageBox>\r\n                        Cart is empty. <Link to=\"/\">Go Back Shopping</Link>\r\n                    </MessageBox>\r\n                ):\r\n                (\r\n                    <ListGroup>\r\n                        {cartItems.map((item) => (\r\n                            <ListGroup.Item key={item._id}>\r\n                                <Row className=\"align-items-center\">\r\n                                    <Col md = {4}>\r\n                                        <img\r\n                                         src={item.image}\r\n                                         alt={item.name}\r\n                                         className=\"img-fluid rounded img-thumbnail\">\r\n\r\n                                         </img>{\" \"}\r\n                                         <Link to={`/product/${item.slug}`}>{item.name}</Link>\r\n                                    </Col>\r\n                                    <Col md = {3}>\r\n                                        <Button variant=\"light\" \r\n                                                onClick={() =>\r\n                                                    updateCartHandler(item, item.quantity - 1)}\r\n                                                disabled={item.quantity === 1}    \r\n                                                >\r\n                                            <i className='fas fa-minus-circle'></i>\r\n                                        </Button>{\" \"}\r\n                                        <span>{item.quantity}</span>{\" \"}\r\n                                        <Button variant=\"light\" \r\n                                                onClick={() =>\r\n                                                    updateCartHandler(item, item.quantity + 1)}\r\n                                                >\r\n                                            <i className='fas fa-plus-circle'></i>\r\n                                        </Button>\r\n                                    </Col>\r\n                                    <Col md = {3}>${item.price}</Col>\r\n                                    <Col md = {2}>\r\n                                        <Button variant='light'\r\n                                                onClick={()=>removeItemHandler(item)}>\r\n                                            <i className='fas fa-trash'></i>\r\n                                        </Button>\r\n                                    </Col>\r\n                                </Row>\r\n                            </ListGroup.Item>\r\n                            \r\n                        ))}\r\n                    </ListGroup>\r\n                )} \r\n            </Col>\r\n            <Col md = {4}>\r\n                <Card>\r\n                    <Card.Body>\r\n                        <ListGroup variant='flush'>\r\n                            <ListGroup.Item>\r\n                                <h3>\r\n                                    Subtotal ({cartItems.reduce((a,c) => a + c.quantity, 0)}{' '}\r\n                                    items) : $\r\n                                    {cartItems.reduce((a,c) => a + c.price * c.quantity, 0)}\r\n                                </h3>\r\n                            </ListGroup.Item>\r\n                            <ListGroup.Item>\r\n                                <div className='d-grid'>\r\n                                    <Button\r\n                                     type=\"button\"\r\n                                     onClick={checkoutHandler}\r\n                                     variant='primary'\r\n                                     disabled={cartItems.length===0}>Proceed to Checkout</Button>\r\n                                </div>\r\n                            </ListGroup.Item>\r\n                        </ListGroup>\r\n                    </Card.Body>\r\n                </Card>\r\n            </Col>\r\n        </Row>\r\n    </div>\r\n    \r\n  )\r\n}\r\n","D:\\React\\shopsuey\\client\\src\\screens\\ShippingAddressScreen.js",[],[],"D:\\React\\shopsuey\\client\\src\\screens\\SigninScreen.js",[],[],"D:\\React\\shopsuey\\client\\src\\utils.js",[],[],"D:\\React\\shopsuey\\client\\src\\components\\LoadingSign.js",[],[],"D:\\React\\shopsuey\\client\\src\\components\\MessageBox.js",[],[],"D:\\React\\shopsuey\\client\\src\\components\\Product.js",["109"],[],"import React, { useReducer,useContext } from 'react'\r\nimport Rating from './Rating'\r\nimport { Link } from 'react-router-dom'\r\nimport axios from 'axios';\r\nimport Card from 'react-bootstrap/Card'\r\nimport Button from 'react-bootstrap/Button'\r\nimport { Store } from '../Store'\r\n\r\nexport default function Product(props) {\r\n  const {product} = props;\r\n  const{ state, dispatch: ctxDispatch } = useContext(Store);\r\n  const{\r\n      cart:{cartItems},\r\n  } = state;\r\n\r\n  const addToCartHandler = async (item) => {\r\n    const existItem = cartItems.find((x) => x._id === product._id);\r\n    const quantity = existItem ? existItem.quantity+1 : 1;\r\n    const {data} = await axios.get(`/api/products/${item._id}`);\r\n    console.log(quantity); \r\n    if(data.countInStock < quantity) {\r\n\r\n        window.alert('Sorry Out of Stock');\r\n        return;\r\n      }\r\n      ctxDispatch({\r\n        type: 'CART_ADD_ITEM',\r\n        payload: {...item, quantity}\r\n      });\r\n}\r\n\r\n  \r\n  return (    \r\n    <Card key={product.slug}>\r\n        <Link to={`/product/${product.slug}`}>\r\n            <img src={product.image} className=\"card-img-top\" alt = {product.name}/>\r\n        </Link>\r\n        <Card.Body>\r\n            <Link to={`/product/${product.slug}`}>\r\n              <Card.Title>{product.name}</Card.Title>\r\n            </Link>\r\n            <Rating rating={product.rating} numReviews={product.numReviews} />\r\n            <Card.Text>${product.price}</Card.Text>\r\n            {product.countInStock === 0 ? <Button disabled variant='light'>Out of Stock</Button>\r\n            :<Button onClick={() => addToCartHandler(product)}>Add to cart</Button>}\r\n        </Card.Body>        \r\n    </Card>\r\n  )\r\n}\r\n","D:\\React\\shopsuey\\client\\src\\components\\Rating.js",[],[],"D:\\React\\shopsuey\\client\\src\\components\\CheckoutSteps.js",[],[],"D:\\React\\shopsuey\\client\\src\\screens\\SignupScreen.js",[],[],"D:\\React\\shopsuey\\client\\src\\screens\\PaymentMethodScreen.js",[],[],"D:\\React\\shopsuey\\client\\src\\screens\\PlaceOrderScreen.js",["110"],[],"import React, { useContext, useEffect, useReducer } from 'react'\r\nimport { Helmet } from 'react-helmet-async'\r\nimport Row from 'react-bootstrap/Row';\r\nimport Col from 'react-bootstrap/Col';\r\nimport Card from 'react-bootstrap/Card';\r\nimport Button from 'react-bootstrap/Button';\r\nimport CheckoutSteps from '../components/CheckoutSteps';\r\nimport {Store} from '../Store';\r\nimport { getError } from '../utils';\r\nimport { toast } from 'react-toastify';\r\nimport {useNavigate, Link} from 'react-router-dom'\r\nimport ListGroup from 'react-bootstrap/ListGroup';\r\nimport  Axios  from 'axios';\r\nimport LoadingSign from '../components/LoadingSign';\r\n\r\nconst reducer = (state, action) => {\r\n    switch(action.type) {\r\n        case 'CREATE_REQUEST':\r\n            return {...state, loading: true}\r\n        case 'CREATE_SUCCESS':\r\n            return {...state, loading: false}\r\n        case 'CREATE_FAIL':\r\n            return {...state, loading: false}\r\n        default:\r\n            return state;    \r\n    }\r\n}\r\n\r\nexport default function PlaceOrderScreen() {\r\n    const {state, dispatch: ctxDispatch} = useContext(Store);\r\n    const {cart, userInfo} = state;\r\n    const navigate = useNavigate();\r\n\r\n    const [{loading}, dispatch] = useReducer(reducer, {\r\n        loading: false,\r\n    });\r\n\r\n    const round2 = (num) => Math.round(num * 100 + Number.EPSILON) / 100;\r\n    cart.itemsPrice = round2(\r\n        cart.cartItems.reduce((a,c) => a + c.quantity * c.price, 0)\r\n    );\r\n    cart.shippingPrice= cart.itemsPrice > 100 ? round2(0) : round2(10);\r\n    cart.taxPrice = round2(0.15 * cart.itemsPrice);\r\n    cart.totalPrice = cart.taxPrice + cart.shippingPrice + cart.itemsPrice\r\n\r\n\r\n    const placeOrderHandler = async() =>{ \r\n        try {\r\n           dispatch({type: 'CREATE_REQUEST'});\r\n           \r\n           const {data} = await Axios.post(\r\n            '/api/orders',\r\n            {\r\n                orderItems: cart.cartItems,\r\n                shippingAddress: cart.shippingAddress,\r\n                paymentMethod: cart.paymentMethod,\r\n                itemsPrice: cart.itemsPrice,\r\n                shippingPrice: cart.shippingPrice,\r\n                taxPrice: cart.taxPrice,\r\n                totalPrice: cart.totalPrice,\r\n            },\r\n            {\r\n                headers: {\r\n                    authorization: `Bearer ${userInfo.token}`\r\n                }\r\n            }\r\n           )\r\n           ctxDispatch({type: 'CART_CLEAR'});\r\n           dispatch({type: 'CREATE_SUCCESS'});\r\n           localStorage.removeItem('cartItems');\r\n           navigate(`/order/${data.order._id}`);\r\n        } catch (err) {\r\n            dispatch({Type: 'CREATE_FAIL'});\r\n            toast.error(getError(err));\r\n        }\r\n    }\r\n\r\n    useEffect(()=>{\r\n        if(!cart.paymentMethod){\r\n            navigate('/payment')\r\n\r\n        }\r\n    },[cart])  \r\n\r\n  return (\r\n    <div>\r\n        <CheckoutSteps step1 step2 step3 step4></CheckoutSteps>\r\n        <Helmet>\r\n            <title>Preview Order</title>\r\n        </Helmet>\r\n        <h1 className='my-3'>Preview Order</h1>\r\n        <Row>\r\n            <Col md={8}>\r\n                <Card className='mb-3'>\r\n                    <Card.Body>\r\n                        <Card.Title>Shipping</Card.Title>\r\n                        <Card.Text>\r\n                            <strong>Name:</strong> {cart.shippingAddress.fullName} <br/>\r\n                            <strong>Address: </strong> {cart.shippingAddress.address},\r\n                            {cart.shippingAddress.city}, {cart.shippingAddress.zipCode}, {cart.shippingAddress.country}\r\n                        </Card.Text>\r\n                        <Link to='/shipping'>Edit</Link>\r\n                    </Card.Body>\r\n                </Card>\r\n                <Card className='mb-3'>\r\n                    <Card.Body>\r\n                        <Card.Title>Payment</Card.Title>\r\n                        <Card.Text>\r\n                            <strong>Method:</strong> {cart.paymentMethod}\r\n                        </Card.Text>\r\n                        <Link to='/payment'>Edit</Link>\r\n                    </Card.Body>\r\n                </Card>\r\n                <Card className='mb-3'>\r\n                    <Card.Body>\r\n                        <ListGroup variant='flush'>\r\n                            {cart.cartItems.map((item) => (\r\n                                <ListGroup.Item key={item.id}>\r\n                                    <Row className='align-items-center'>\r\n                                        <Col md={6}>\r\n                                            <img \r\n                                            src={item.image}\r\n                                            alt='qwer'\r\n                                            className='img-fluid rounded img-thumbnail'>\r\n                                            </img>{' '}\r\n                                            <Link to={`/product/${item.slug}`}>{item.name}</Link>\r\n                                        </Col>\r\n                                        <Col md={3}>\r\n                                            <span>{item.quantity}</span>\r\n                                        </Col>\r\n                                        <Col md={3}>${item.price}</Col>                                            \r\n                                    </Row>\r\n                                </ListGroup.Item>\r\n                            ))}\r\n                        </ListGroup>\r\n                        <Link to='/cart'>Edit</Link>\r\n                    </Card.Body>\r\n                </Card>                \r\n            </Col>\r\n            <Col md={3}> {/* md=4 out of 12 for columns*/}\r\n                <Card>\r\n                    <Card.Body>\r\n                        <Card.Title>Order Summary</Card.Title>\r\n                        <ListGroup variant='flush'>\r\n                            <ListGroup.Item>\r\n                                <Row>\r\n                                    <Col>Items</Col>\r\n                                    <Col>${cart.itemsPrice.toFixed(2)}</Col>\r\n                                </Row>\r\n                            </ListGroup.Item>\r\n                            <ListGroup.Item>\r\n                                <Row>\r\n                                    <Col>Shipping</Col>\r\n                                    <Col>${cart.shippingPrice.toFixed(2)}</Col>\r\n                                </Row>\r\n                            </ListGroup.Item>\r\n                            <ListGroup.Item>\r\n                                <Row>\r\n                                    <Col>Tax</Col>\r\n                                    <Col>${cart.taxPrice.toFixed(2)}</Col>\r\n                                </Row>\r\n                            </ListGroup.Item>\r\n                            <ListGroup.Item>\r\n                                <Row>\r\n                                    <Col>Order Total</Col>\r\n                                    <Col>${cart.totalPrice.toFixed(2)}</Col>\r\n                                </Row>\r\n                            </ListGroup.Item>\r\n                            <ListGroup.Item>\r\n                                <div className='d-grid'>\r\n                                    <Button type='button' onClick={placeOrderHandler}\r\n                                    disabled={cart.cartItems.lentgh === 0}\r\n                                    >Place Order\r\n                                    </Button>                                    \r\n                                </div>\r\n                                {loading && <LoadingSign></LoadingSign> }\r\n                            </ListGroup.Item>\r\n                        </ListGroup>\r\n                    </Card.Body>\r\n                </Card>                \r\n             </Col>\r\n        </Row> \r\n    </div>\r\n  )\r\n}\r\n","D:\\React\\shopsuey\\client\\src\\screens\\OrderScreen.js",["111","112"],[],"import axios, { Axios } from 'axios';\r\nimport React, { useContext, useEffect, useReducer } from 'react'\r\nimport Row from 'react-bootstrap/Row';\r\nimport Col from 'react-bootstrap/Col';\r\nimport { PayPalButtons, usePayPalScriptReducer } from '@paypal/react-paypal-js';\r\nimport ListGroup from 'react-bootstrap/ListGroup';\r\nimport Card from 'react-bootstrap/Card';\r\nimport { Helmet } from 'react-helmet-async';\r\nimport { Navigate, useNavigate, useParams, Link } from 'react-router-dom';\r\nimport LoadingSign from '../components/LoadingSign'\r\nimport MessageBox from '../components/MessageBox'\r\nimport { Store } from '../Store';\r\nimport { getError } from '../utils';\r\nimport { toast } from 'react-toastify';\r\n\r\nconst reducer = (state,action) => {\r\n    switch(action.type) {\r\n      case 'FETCH_REQUEST': \r\n        return {...state, loading: true};\r\n      case 'FETCH_SUCCESS':\r\n        return{...state, error: '',order: action.payload, loading: false};\r\n      case 'FETCH_FAIL':\r\n        return{...state, loading: false, error: action.payload};\r\n      case 'PAY_REQUEST':\r\n        return{...state, loadingPay: true};   \r\n      case 'PAY_SUCCESS':\r\n        return{...state, successPay: true, loadingPay: false};\r\n      case 'PAY_FAIL':\r\n        return{...state, loadingPay: false, errorPay: action.payload};   \r\n      case 'PAY_RESET':\r\n        return{...state, loadingPay: false, successPay: false};   \r\n      default:\r\n        return state;\r\n    }\r\n  }\r\n\r\nexport default function OrderScreen() {\r\n    const {state} = useContext(Store);\r\n    const {userInfo} = state;\r\n    const navigate = useNavigate();\r\n    const params = useParams();\r\n    const {id: orderId} = params;\r\n\r\n\r\n    const [{loading, error, order, successPay, loadingPay}, dispatch]= useReducer(reducer, {\r\n        loading: true,\r\n        order: {},\r\n        error: '',\r\n        successPay: false,\r\n        loadingPay: false,\r\n    })\r\n\r\n    const[{isPending}, paypalDispatch] = usePayPalScriptReducer();\r\n\r\n    function createOrder(data, actions) {\r\n        return actions.order\r\n        .create({\r\n            purchase_units: [\r\n                {\r\n                    amount: {value: order.totalPrice},\r\n                },\r\n            ],\r\n        })\r\n        .then((orderID) => {\r\n            return orderID;\r\n        })\r\n    }\r\n\r\n    function onApprove(data, actions){\r\n        return actions.order.capture().then(async function (details) {\r\n            try{\r\n                dispatch({type: 'PAY_REQUEST'});\r\n                const{data} = await axios.put(\r\n                    `/api/orders/${order._id}/pay`,\r\n                    details,\r\n                    {\r\n                        headers: {authorization: `Bearer ${userInfo.token}`},\r\n                    }\r\n                );\r\n                dispatch({type:'PAY_SUCCESS', payload: data});\r\n                toast.success('Order has been placed');\r\n            }catch(err){\r\n                dispatch({type: 'PAY_FAIL', payload: getError(err)});\r\n                toast.error(getError(err));\r\n            }\r\n            \r\n        })\r\n    }\r\n\r\n    function onError(err){\r\n        toast.error(getError(err));\r\n    }\r\n\r\n    useEffect(() => {\r\n        const fetchOrder = async () => {\r\n            try {\r\n                dispatch({type: 'FETCH_REQUEST'});\r\n                const {data} = await axios.get(`/api/orders/${orderId}`, {\r\n                    headers: {authorization: `Bearer ${userInfo.token}`},\r\n                });\r\n                dispatch({type: 'FETCH_SUCCESS', payload: data});\r\n            }   catch(err) {\r\n                dispatch({type: 'FETCH_FAIL', payload: getError(err)});                \r\n            }\r\n        }\r\n        if(!userInfo) {\r\n            return navigate('/login')\r\n        }\r\n        if(!order._id || successPay ||(order._id && order._id !== orderId)){\r\n            fetchOrder();\r\n            if (successPay) {\r\n                dispatch({type: 'PAY_RESET'})\r\n            }\r\n        } else{\r\n            const loadPaypalScript = async () => {\r\n                const {data: clientId} = await axios.get('/api/keys/paypal', {\r\n                    headers: { authorization: `Bearer ${userInfo.token}`},\r\n                });\r\n                paypalDispatch({\r\n                    type: 'resetOptions',\r\n                    value: {\r\n                        'client-id': clientId,\r\n                        currency: 'USD',\r\n                    },\r\n                })\r\n                paypalDispatch({type: 'setLoadingStatus', value: 'pending'});\r\n            }\r\n            loadPaypalScript();\r\n        }\r\n    },[order, userInfo, navigate, paypalDispatch, successPay, orderId]);\r\n\r\n    return loading ? (\r\n\r\n    <LoadingSign></LoadingSign> ) :\r\n    error ? (\r\n        <MessageBox variant='danger'>{error}</MessageBox>\r\n    ) : (\r\n        <div>\r\n            <Helmet>\r\n                <title>Order Review</title>\r\n            </Helmet>\r\n            <h1 className='my-3'>Order Review</h1>\r\n            <Row>\r\n                <Col md={8}>\r\n                    <Card className='mb-3'>\r\n                        <Card.Body>\r\n                            <Card.Title>Shipping</Card.Title>\r\n                            <Card.Text>\r\n                                <strong>Name:</strong> {order.shippingAddress.fullName} <br/>\r\n                                <strong>Address: </strong> {order.shippingAddress.address},\r\n                                {order.shippingAddress.city}, {order.shippingAddress.zipCode}, \r\n                                {order.shippingAddress.country}\r\n                            </Card.Text>\r\n                            {order.isDelivered ? (\r\n                                <MessageBox variant='success'>\r\n                                    Delivered at {order.deliveredAt}\r\n                                </MessageBox>\r\n                            ) : (\r\n                                <MessageBox variant='danger'>Not Delivered</MessageBox>\r\n                            )}\r\n                            <Link to='/payment'>Edit</Link>\r\n                        </Card.Body>\r\n                    </Card>\r\n                    <Card className='mb-3'>\r\n                        <Card.Body>\r\n                            <Card.Title>Payment</Card.Title>\r\n                            <Card.Text>\r\n                                <strong>Method:</strong> {order.paymentMethod}\r\n                            </Card.Text>\r\n                            {order.isPaid ? (\r\n                                <MessageBox variant='success'>\r\n                                    Paid at {order.paidAt}\r\n                                </MessageBox>\r\n                            ) : (\r\n                                <MessageBox variant='danger'>Not Paid</MessageBox>\r\n                            )}\r\n                            <Link to='/payment'>Edit</Link>\r\n                        </Card.Body>\r\n                    </Card>\r\n                    <Card className='mb-3'>\r\n                    <Card.Body>\r\n                        <Card.Title>Items</Card.Title>\r\n                        <ListGroup variant='flush'>\r\n                            {order.orderItems.map((item) => (\r\n                                <ListGroup.Item key={item.id}>\r\n                                    <Row className='align-items-center'>\r\n                                        <Col md={6}>\r\n                                            <img \r\n                                            src={item.image}\r\n                                            alt='qwer'\r\n                                            className='img-fluid rounded img-thumbnail'>\r\n                                            </img>{' '}\r\n                                            <Link to={`/product/${item.slug}`}>{item.name}</Link>\r\n                                        </Col>\r\n                                        <Col md={3}>\r\n                                            <span>{item.quantity}</span>\r\n                                        </Col>\r\n                                        <Col md={3}>${item.price}</Col>                                            \r\n                                    </Row>\r\n                                </ListGroup.Item>\r\n                            ))}\r\n                        </ListGroup>\r\n                        <Link to='/cart'>Edit</Link>\r\n                    </Card.Body>\r\n                </Card>\r\n                </Col>\r\n                <Col md={4}>\r\n                    <Card className='mb-3'>\r\n                        <Card.Body>\r\n                            <Card.Title>Order Summary</Card.Title>\r\n                            <ListGroup variant='flush'>\r\n                                <ListGroup.Item>\r\n                                    <Row>\r\n                                        <Col>Items</Col>\r\n                                        <Col>${order.itemsPrice.toFixed(2)}</Col>\r\n                                    </Row>\r\n                                </ListGroup.Item>\r\n                                <ListGroup.Item>\r\n                                    <Row>\r\n                                        <Col>Shipping</Col>\r\n                                        <Col>${order.shippingPrice.toFixed(2)}</Col>\r\n                                    </Row>\r\n                                </ListGroup.Item>\r\n                                <ListGroup.Item>\r\n                                    <Row>\r\n                                        <Col><strong>Tax</strong></Col>\r\n                                        <Col><strong>${order.taxPrice.toFixed(2)}</strong></Col>\r\n                                    </Row>\r\n                                </ListGroup.Item>\r\n                                <ListGroup.Item>\r\n                                    <Row>\r\n                                        <Col>Total</Col>\r\n                                        <Col>${order.totalPrice.toFixed(2)}</Col>\r\n                                    </Row>\r\n                                </ListGroup.Item>\r\n                                {!order.isPaid && (\r\n                                    <ListGroup.Item>\r\n                                        {isPending ? (\r\n                                            <LoadingSign />\r\n                                        ) :\r\n                                        (<div>\r\n                                            <PayPalButtons \r\n                                            createOrder={createOrder} \r\n                                            onApprove={onApprove} \r\n                                            onError={onError}></PayPalButtons>\r\n                                        </div>)\r\n                                        }\r\n                                        {loadingPay && <LoadingSign></LoadingSign>}\r\n                                    </ListGroup.Item>\r\n                                )}\r\n                            </ListGroup>\r\n                        </Card.Body>\r\n                    </Card>\r\n                </Col>\r\n            </Row>\r\n        </div>\r\n    )\r\n  \r\n}\r\n","D:\\React\\shopsuey\\client\\src\\screens\\OrderHistoryScreen.js",[],[],{"ruleId":"113","severity":1,"message":"114","line":9,"column":10,"nodeType":"115","messageId":"116","endLine":9,"endColumn":18},{"ruleId":"113","severity":1,"message":"117","line":1,"column":40,"nodeType":"115","messageId":"116","endLine":1,"endColumn":48},{"ruleId":"113","severity":1,"message":"118","line":45,"column":13,"nodeType":"115","messageId":"116","endLine":45,"endColumn":19},{"ruleId":"113","severity":1,"message":"114","line":2,"column":16,"nodeType":"115","messageId":"116","endLine":2,"endColumn":24},{"ruleId":"113","severity":1,"message":"119","line":4,"column":22,"nodeType":"115","messageId":"116","endLine":4,"endColumn":31},{"ruleId":"113","severity":1,"message":"120","line":4,"column":33,"nodeType":"115","messageId":"116","endLine":4,"endColumn":43},{"ruleId":"113","severity":1,"message":"120","line":1,"column":17,"nodeType":"115","messageId":"116","endLine":1,"endColumn":27},{"ruleId":"121","severity":1,"message":"122","line":83,"column":7,"nodeType":"123","endLine":83,"endColumn":13,"suggestions":"124"},{"ruleId":"113","severity":1,"message":"125","line":1,"column":17,"nodeType":"115","messageId":"116","endLine":1,"endColumn":22},{"ruleId":"113","severity":1,"message":"114","line":9,"column":10,"nodeType":"115","messageId":"116","endLine":9,"endColumn":18},"no-unused-vars","'Navigate' is defined but never used.","Identifier","unusedVar","'useState' is defined but never used.","'result' is assigned a value but never used.","'useEffect' is defined but never used.","'useReducer' is defined but never used.","react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'navigate'. Either include it or remove the dependency array.","ArrayExpression",["126"],"'Axios' is defined but never used.",{"desc":"127","fix":"128"},"Update the dependencies array to be: [cart, navigate]",{"range":"129","text":"130"},[2817,2823],"[cart, navigate]"]